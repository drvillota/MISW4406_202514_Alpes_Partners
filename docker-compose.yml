networks:
  pulsar:
    driver: bridge

services:
  zookeeper:
    image: apachepulsar/pulsar:latest
    profiles: ["pulsar"]
    container_name: zookeeper
    restart: on-failure
    networks:
      - pulsar
    volumes:
      - ./data/zookeeper:/pulsar/data/zookeeper
    environment:
      - metadataStoreUrl=zk:zookeeper:2181
    command: >
      bash -c "bin/apply-config-from-env.py conf/zookeeper.conf && \
             bin/generate-zookeeper-config.sh conf/zookeeper.conf && \
             exec bin/pulsar zookeeper"
    healthcheck:
      test: ["CMD", "bin/pulsar-zookeeper-ruok.sh"]
      interval: 10s
      timeout: 5s
      retries: 30

  pulsar-init:
    container_name: pulsar-init
    hostname: pulsar-init
    image: apachepulsar/pulsar:latest
    profiles: ["pulsar"]
    networks:
      - pulsar
    command: bin/pulsar initialize-cluster-metadata --cluster cluster-a --zookeeper zookeeper:2181 --configuration-store zookeeper:2181 --web-service-url http://broker:8080 --broker-service-url pulsar://broker:6650
    depends_on:
      zookeeper:
        condition: service_healthy

  bookie:
    image: apachepulsar/pulsar:latest
    profiles: ["pulsar"]
    container_name: bookie
    restart: on-failure
    networks:
      - pulsar
    environment:
      - clusterName=cluster-a
      - zkServers=zookeeper:2181
      - metadataServiceUri=metadata-store:zk:zookeeper:2181
    depends_on:
      zookeeper:
        condition: service_healthy
      pulsar-init:
        condition: service_completed_successfully
    volumes:
      - ./data/bookkeeper:/pulsar/data/bookkeeper
    command: bash -c "bin/apply-config-from-env.py conf/bookkeeper.conf && exec bin/pulsar bookie"

  broker:
    image: apachepulsar/pulsar:latest
    profiles: ["pulsar"]
    container_name: broker
    hostname: broker
    restart: on-failure
    networks:
      - pulsar
    environment:
      - metadataStoreUrl=zk:zookeeper:2181
      - zookeeperServers=zookeeper:2181
      - clusterName=cluster-a
      - managedLedgerDefaultEnsembleSize=1
      - managedLedgerDefaultWriteQuorum=1
      - managedLedgerDefaultAckQuorum=1
      - advertisedAddress=broker
      - advertisedListeners=external:pulsar://broker:6650
    depends_on:
      zookeeper:
        condition: service_healthy
      bookie:
        condition: service_started
    ports:
      - "6650:6650"
      - "8080:8080"
    volumes:
      - ./connectors/pulsar:/pulsar/connectors
    command: bash -c "bin/apply-config-from-env.py conf/broker.conf && exec bin/pulsar broker"
  
  # Base de datos de afiliados
  db-afiliados-comisiones:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: afiliados
      POSTGRES_USER: afiliados
      POSTGRES_PASSWORD: afiliados
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U afiliados"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - pulsar

  afiliados-comisiones:
    container_name: afiliados-comisiones
    hostname: afiliados-comisiones
    build:
      context: ./afiliados-comisiones-servicio
      dockerfile: afiliados-comisiones.Dockerfile
    profiles: ["afiliados-comisiones", "pulsar"]
    networks:
      - pulsar
    depends_on:
      - broker
      - db-afiliados-comisiones
    environment:
      - APP_ENV=dev
      - DATABASE_URL=postgresql+psycopg2://afiliados:afiliados@db-afiliados-comisiones:5432/afiliados
      - UVICORN_PORT=8080
      - AEROALPES_ADDRESS=aeroalpes
      - BROKER_HOST=broker
    ports:
      - "8081:8080"

  # Base de datos de monitoreo
  db-monitoreo:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: monitoreo
      POSTGRES_USER: monitoreo
      POSTGRES_PASSWORD: monitoreo
    ports:
      - "5433:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U monitoreo"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - pulsar

  monitoreo:
    container_name: monitoreo
    hostname: monitoreo
    build:
      context: ./monitoreo-servicio
      dockerfile: monitoreo.Dockerfile
    profiles: ["monitoreo", "pulsar"]
    networks:
      - pulsar
    depends_on:
      - broker
      - db-monitoreo
    environment:
      - APP_ENV=dev
      - DATABASE_URL=postgresql+psycopg2://monitoreo:monitoreo@db-monitoreo:5432/monitoreo
      - UVICORN_PORT=8080
      - AEROALPES_ADDRESS=aeroalpes
      - BROKER_HOST=broker
    ports:
      - "8082:8080"

  # Base de datos de colaboraciones
  db-colaboraciones:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: colaboraciones
      POSTGRES_USER: colaboraciones
      POSTGRES_PASSWORD: colaboraciones
    ports:
      - "5434:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U colaboraciones"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - pulsar

  colaboraciones-servicio:
    container_name: colaboraciones-servicio
    hostname: colaboraciones-servicio
    build:
      context: ./colaboraciones-servicio
      dockerfile: colaboraciones.Dockerfile
    profiles: ["colaboraciones", "pulsar"]
    networks:
      - pulsar
    depends_on:
      - broker
      - db-colaboraciones
    environment:
      - APP_ENV=dev
      - DATABASE_URL=postgresql+psycopg2://colaboraciones:colaboraciones@db-colaboraciones:5432/colaboraciones
      - UVICORN_PORT=8080
      - BROKER_HOST=broker
    ports:
      - "8083:8080"

  # pgAdmin para manejar la BD de colaboraciones
  pgadminColaboraciones:
    image: dpage/pgadmin4
    container_name: pgadminColaboraciones
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@admin.com
      PGADMIN_DEFAULT_PASSWORD: admin
    ports:
      - "5050:80"
    depends_on:
      - db-colaboraciones
    networks:
      - pulsar

  # Base de datos para Saga Log
  db-saga:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: saga
      POSTGRES_USER: saga
      POSTGRES_PASSWORD: saga
    ports:
      - "5435:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U saga"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - pulsar

  # BFF Service - Backend for Frontend
  bff-service:
    container_name: bff-service
    hostname: bff-service
    build:
      context: ./bff-service
      dockerfile: bff.Dockerfile
    profiles: ["bff", "pulsar"]
    networks:
      - pulsar
    depends_on:
      - broker
      - db-saga
      - afiliados-comisiones
      - monitoreo
      - colaboraciones-servicio
    environment:
      - APP_ENV=dev
      - SAGA_DATABASE_URL=postgresql+psycopg2://saga:saga@db-saga:5432/saga
      - LEALTAD_CONTENIDO_URL=http://lealtad-contenido:8080
      - AFILIADOS_COMISIONES_URL=http://afiliados-comisiones:8081
      - COLABORACIONES_URL=http://colaboraciones-servicio:8083
      - MONITOREO_URL=http://monitoreo:8082
      - PULSAR_URL=pulsar://broker:6650
      - BROKER_HOST=broker
    ports:
      - "8000:8080"
