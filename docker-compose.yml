networks:
  pulsar:
    driver: bridge

services:
  zookeeper:
    image: apachepulsar/pulsar:latest
    profiles: ["pulsar"]
    container_name: zookeeper
    restart: on-failure
    networks:
      - pulsar
    volumes:
      - ./data/zookeeper:/pulsar/data/zookeeper
    environment:
      - metadataStoreUrl=zk:zookeeper:2181
    command: >
      bash -c "bin/apply-config-from-env.py conf/zookeeper.conf && \
             bin/generate-zookeeper-config.sh conf/zookeeper.conf && \
             exec bin/pulsar zookeeper"
    healthcheck:
      test: ["CMD", "bin/pulsar-zookeeper-ruok.sh"]
      interval: 10s
      timeout: 5s
      retries: 30

# Init cluster metadata
  pulsar-init:
    container_name: pulsar-init
    hostname: pulsar-init
    image: apachepulsar/pulsar:latest
    profiles: ["pulsar"]
    networks:
      - pulsar
    command: bin/pulsar initialize-cluster-metadata --cluster cluster-a --zookeeper zookeeper:2181 --configuration-store zookeeper:2181 --web-service-url http://broker:8080 --broker-service-url pulsar://broker:6650
    depends_on:
      zookeeper:
        condition: service_healthy

# Start bookie
  bookie:
    image: apachepulsar/pulsar:latest
    profiles: ["pulsar"]
    container_name: bookie
    restart: on-failure
    networks:
      - pulsar
    environment:
      - clusterName=cluster-a
      - zkServers=zookeeper:2181
      - metadataServiceUri=metadata-store:zk:zookeeper:2181
    depends_on:
      zookeeper:
        condition: service_healthy
      pulsar-init:
        condition: service_completed_successfully
  # Map the local directory to the container to avoid bookie startup failure due to insufficient container disks.
    volumes:
      - ./data/bookkeeper:/pulsar/data/bookkeeper
    command: bash -c "bin/apply-config-from-env.py conf/bookkeeper.conf
      && exec bin/pulsar bookie"

# Start broker
  broker:
    image: apachepulsar/pulsar:latest
    profiles: ["pulsar"]
    container_name: broker
    hostname: broker
    restart: on-failure
    networks:
      - pulsar
    environment:
      - metadataStoreUrl=zk:zookeeper:2181
      - zookeeperServers=zookeeper:2181
      - clusterName=cluster-a
      - managedLedgerDefaultEnsembleSize=1
      - managedLedgerDefaultWriteQuorum=1
      - managedLedgerDefaultAckQuorum=1
      - advertisedAddress=broker
      - advertisedListeners=external:pulsar://broker:6650
    depends_on:
      zookeeper:
        condition: service_healthy
      bookie:
        condition: service_started
    ports:
      - "6650:6650"
      - "8080:8080"
    volumes:
      - ./connectors/pulsar:/pulsar/connectors
    command: bash -c "bin/apply-config-from-env.py conf/broker.conf
      &&  exec bin/pulsar broker"
  
  db-afiliados-comisiones:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: afiliados
      POSTGRES_USER: afiliados
      POSTGRES_PASSWORD: afiliados
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U afiliados"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - pulsar

  afiliados-comisiones:
    container_name: afiliados-comisiones
    hostname: afiliados-comisiones
    build:
      context: ./afiliados-comisiones-servicio
      dockerfile: afiliados-comisiones.Dockerfile
    profiles: ["afiliados-comisiones", "pulsar"]
    networks:
      - pulsar
    depends_on:
      - broker
      - db-afiliados-comisiones
    environment:
      - APP_ENV=dev
      - DATABASE_URL=postgresql+psycopg2://afiliados:afiliados@db-afiliados-comisiones:5432/afiliados
      - UVICORN_PORT=8080
      - AEROALPES_ADDRESS=aeroalpes
      - BROKER_HOST=broker
    ports:
      - "8081:8080"

  db-monitoreo:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: monitoreo
      POSTGRES_USER: monitoreo
      POSTGRES_PASSWORD: monitoreo
    ports:
      - "5433:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U monitoreo"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - pulsar
  monitoreo:
    container_name: monitoreo
    hostname: monitoreo
    build:
      context: ./monitoreo-servicio
      dockerfile: monitoreo.Dockerfile
    profiles: ["monitoreo", "pulsar"]
    networks:
      - pulsar
    depends_on:
      - broker
      - db-monitoreo
    environment:
      - APP_ENV=dev
      - DATABASE_URL=postgresql+psycopg2://monitoreo:monitoreo@db-monitoreo:5432/monitoreo
      - UVICORN_PORT=8080
      - AEROALPES_ADDRESS=aeroalpes
      - BROKER_HOST=broker
    ports:
      - "8082:8080"

  db-colaboraciones:
    image: mysql:8.0
    container_name: db-colaboraciones
    environment:
      MYSQL_DATABASE: colaboraciones
      MYSQL_USER: colaboraciones
      MYSQL_PASSWORD: colaboraciones_pass
      MYSQL_ROOT_PASSWORD: root_pass
    ports:
      - "3306:3306"     # mapa local -> container (opcional)
    volumes:
      - ./data/db-colaboraciones:/var/lib/mysql
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-uroot", "-proot_pass"]
      interval: 5s
      timeout: 5s
      retries: 10
    networks:
      - pulsar
    restart: unless-stopped

  colaboraciones:
    container_name: colaboraciones-servicio
    hostname: colaboraciones
    build:
      context: ./colaboraciones-servicio
      dockerfile: colaboraciones-servicio.Dockerfile
    profiles: ["colaboraciones-servicio", "pulsar"]
    networks:
      - pulsar
    depends_on:
      broker:
        condition: service_started
      db-colaboraciones:
        condition: service_healthy
    environment:
      # variables que usa src/config/db.py (si NO usas TESTING=true)
      - APP_ENV=dev
      - DB_USERNAME=colaboraciones
      - DB_PASSWORD=colaboraciones_pass
      - DB_HOSTNAME=db-colaboraciones
      - DB_NAME=colaboraciones
      - UVICORN_PORT=8080
      - BROKER_HOST=broker
      - TESTING=false
    ports:
      - "8083:8080"   # expone el servicio en 8083 local -> 8080 container
    