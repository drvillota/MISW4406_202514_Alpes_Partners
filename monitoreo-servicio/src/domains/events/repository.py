from __future__ import annotations
from typing import Optional, List
from datetime import datetime
from uuid import UUID
from ...core.seedwork.repository import Repository
from .entities import Event, EventType

class EventRepository(Repository):
    """Repository CRUD"""
    def add(self, entity: Event) -> None: ...
    def get(self, entity_id: UUID) -> Optional[Event]: ...
    def exists(self, entity_id: UUID) -> bool: ...
    def delete_older_than(self, cutoff_date: datetime) -> int: ...

class EventQueryRepository:
    """Repository especializado"""
    def get_by_period(self, start: datetime, end: datetime) -> List[Event]: ...
    def get_by_type_and_period(self, event_type: EventType, start: datetime, end: datetime) -> List[Event]: ...
    def count_by_type(self, event_type: EventType, start: datetime, end: datetime) -> int: ...
    def get_user_journey(self, user_id: UUID, start: datetime, end: datetime) -> List[Event]: ...
    def get_conversion_rate(self, start: datetime, end: datetime) -> float: ...